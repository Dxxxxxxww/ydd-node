/**
 * 静态资源 不仅仅是图片，它放在扫描位置是很重要的，因为静态资源的加载时很消耗流量的，访问速度慢
 * 1、网站目录。最简单，最常见。缺点污染项目代码
 * 2、静态资源服务器 有点像微服务。可以就用 koa 框架 + koa static ，然后不需要什么代码，全部都是管理静态资源的，
 * 同时这个静态资源服务器可以部署到另外一台机器上，另一台机器上的最基本要求就是带宽足够。比上一种要好一点。
 * 3、云服务 需要有 ECS(linux服务器)，RDS(关系型数据库)，OSS。可以用CDN，多节点，这样即便全国各地访问，都不会卡，解决了2的问题。缺点贵。
 * 4、免费静态资源服务器 github gitpage 个人开发
 * 
 * 静态资源: js、css、html、图片
 * vue、react 编写的前端单页面也算(不包括 nuxt 做的 ssr)。
 * 传统网站需要SEO所以像淘宝，京东这些PC主站都是以前服务端模板那一套的
 * vue、react => 做 CMS 公司内部管理系统 不需要SEO
 *               做 WebApp(H5)
 * 
 * 
 *
 * // 2小时
  // token1 1小时59分59秒 超过2小时
  // 退出
  // 自动 无感知帮助他重新刷新令牌
  // 退出 短时间 二次重发机制

  // 这里小程序只用了 basic auth 单令牌
  // 小程序可以进行用户无感知的二次重发的关键是小程序不需要用户输入账号密码进行验证的。(代码的巧妙只是一部分)
  // 如果在获取 token 的时候必须验证账号密码的话就无法做到无感知了。
  // 很多 app 都是将账号密码存在缓存中，这种做法非常不安全(很low),再用小程序方式实现无感知二次重发。
  // 更好的办法是使用双令牌
  // access_token => 验证用户身份。 refresh_token => 避免用户重新输入账号密码
  // 如果 access_token 过期了，就用 refresh_token 去获取一个新的 access_token
  // 但是很复杂。假如说 refresh_token 也过期了，就又得打扰用户了。
  // 可以使用这样的办法，每次获取 access_token 的时候，就重置一次 refresh_token 的时间。
  // 比如说 access_token 2h。 refresh_token 一个月。
  // 用户进入 app 使用一段时间， access_token 过期。过期了以后就用 refresh_token 重新获取 access_token
  // 服务端检测到 refresh_token 后重新颁布一个 access_token(2h)，并重置了 refresh_token 时间。
  // 这就保证了用户在一个月内使用过 app，就会一直保存登录状态。但是超过一个月就不保存了。
 */
